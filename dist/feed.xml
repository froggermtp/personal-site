<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matthew Parris | Blog</title>
  <subtitle>Looking for meaning</subtitle>
  <link href="https://www.matthewparris.org/feed.xml" rel="self"/>
  <link href="https://www.matthewparris.org/"/>
  <updated>2020-09-25T19:00:00-05:00</updated>
  <id>https://www.matthewparris.org/</id>
  <author>
    <name>Matthew Parris</name>
    <email>matthewparris@outlook.com</email>
  </author>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.matthewparris.org/hello-world/"/>
    <updated>2020-05-28T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/hello-world/</id>
    <content type="html">&lt;p&gt;For the last few years, I&#39;ve kicked around the idea of starting a blog. The main obstacle in my way has been time. With college over, I&#39;ve found the inspiration needed to ship this thing. It is not finished per se; however, I feel comfortable sharing it with the world.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;I am writing mainly to share ideas. As Naval said, &amp;quot;Don&#39;t write to make money, write to build relationships with like-minded people that you haven&#39;t yet met.&amp;quot;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Thus, if you find any of the ideas interesting, feel free to reach out to me. I regularly check my email and periodically check my social media direct messages.&lt;/p&gt;
&lt;p&gt;As a byproduct of writing, I want to think better. David Perell argues that &amp;quot;an empty white page is a mirror into your mind. When the ideas in your mind are clouded, so are the words on the page in front of you. Re-writing is re-thinking. It’s the best single best way to sharpen your ideas.&amp;quot;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; From my own experience, I found this sentiment to be true. Writing forces you to more precise with your thoughts.&lt;/p&gt;
&lt;p&gt;And I need to find clarity on some issues. If college did anything, it certainly scrambled my brain. I have a lot of random, disconnected pieces of knowledge. I want to try to fit it all together--or at least forget wrong or unhelpful information.&lt;/p&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;For the moment, the blog won&#39;t have a particular theme. I hope to somewhat narrow down on something as the blog develops. To note, I graduated with a degree in computer science and currently have a job as a software developer. Therefore, you can expect some computer-related articles. There also might be some Jesus-smuggling, but I promise to be nice about it.&lt;/p&gt;
&lt;p&gt;I don&#39;t want to brand myself, at least intentionally. I want the blog to sound like me and to have some rough edges. Thus, the ideas shared here may be wrong. Feel free to correct me (kindly). I will probably be correcting myself. I couldn&#39;t count how many times I have changed my mind in the last few years.&lt;/p&gt;
&lt;h2&gt;The Plan&lt;/h2&gt;
&lt;p&gt;My initial plan is to try to post once a week. I am publishing this goal as a way of keeping myself accountable. When left to my own devices, I have a habit of not finishing things. Hopefully, I&#39;ll stay focused and stick with this for an extended amount of time. It may take a while for something interesting to develop here. Maybe, it will be me talking to myself. Who knows?&lt;/p&gt;
&lt;h2&gt;Technical Details&lt;/h2&gt;
&lt;p&gt;If you don&#39;t care about the technical details behind the blog, you can stop reading now.&lt;/p&gt;
&lt;p&gt;The blog is built using a static site generator called &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt;. I like the framework because it is written in JavaScript. JavaScript is a language that I already know. This familiarity makes tweaking the configuration file and writing plugins a breeze.&lt;/p&gt;
&lt;p&gt;The frontend work is currently being done with the template engine &lt;a href=&quot;https://www.mozilla.github.io/nunjucks/&quot;&gt;Nunjucks&lt;/a&gt; and some vanilla CSS. Nunjucks is relatively close to standard HTML, so learning it wasn&#39;t too bad. Now, I didn&#39;t have to use Nunjucks. Eleventy is compatible with many other template engines, but a lot of the documentation is targeted at Nunjucks. When learning Eleventy, it&#39;s worth keeping that in mind.&lt;/p&gt;
&lt;p&gt;The website is currently deployed on &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt;. Netlify is a SAAS company that empowers people to build websites &amp;quot;without servers, DevOps, or costly infrastructure.&amp;quot;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; Honestly, I don&#39;t quite know what all Netlify can do. So far, I&#39;m only using them to host this blog.&lt;/p&gt;
&lt;p&gt;But I&#39;ve found their product easy to use. It also has a free tier--which means that the variable costs for this blog sit at zero dollars. The free tier has limitations, but this little blog should never hit them.&lt;/p&gt;
&lt;p&gt;I don&#39;t want to ramble on any further. This website should sustain our appetites for the time being. And there&#39;s plenty of features to implement and essays to scribble out. Sigh. I&#39;ll get to work.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I don&#39;t have all my thoughts together on Naval. I found him on Twitter. He has insightful ideas and a knack for speaking the profound precisely. &lt;a href=&quot;https://twitter.com/NavalBot/status/1264647582522970113?s=20&quot;&gt;I&#39;ll link to the tweet the quote comes from, hopefully it doesn&#39;t disappear too quickly.&lt;/a&gt; &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;David writes a lot about writing on the Internet. &lt;a href=&quot;https://www.perell.com/blog/why-you-should-write&quot;&gt;This quote was taken from this article.&lt;/a&gt; &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Did I copy some advertising from Netlify&#39;s website? Yes. Anyway, you should check out their website if a more detailed walkthrough of what Netlify can do. &lt;a href=&quot;#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  
  <entry>
    <title>Simulated Annealing</title>
    <link href="https://www.matthewparris.org/simulated-annealing/"/>
    <updated>2020-06-04T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/simulated-annealing/</id>
    <content type="html">&lt;p&gt;Sometimes, a problem doesn&#39;t have a known, efficient, deterministic algorithm. This hiccup isn&#39;t necessarily a big deal because often we only care about getting an answer that is close enough. One algorithm that can give approximate values for hard to solve problems is simulated annealing. Before jumping into the R code, let&#39;s look at a motivating example.&lt;/p&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;The traveling salesman problem doesn&#39;t have a polynomial-time deterministic algorithm and thus is a good candidate for us to explore. The problem name itself nearly gives away the details. Imagine a map with some fixed number of randomly placed cities. We now want to hire a salesperson—let&#39;s name her Sally—who needs to visit every city, without revisiting any city, to sell some product.&lt;/p&gt;
&lt;p&gt;When the number of cities is small, we can use brute force techniques to try every possible permutation of city orderings. Of course, for a relatively large amount of cities, trying to find the route this way will be intractable. We aren&#39;t completely doomed though. Do we care if Sally takes the most optimal route? For this situation, not really. While we want Sally to take a fast route, it doesn&#39;t have to be the fastest route. Luckily, it turns out that simulated annealing can tractably generate fast routes.&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;The traveling salesman problem is a little complicated, so let&#39;s set up a toy problem instead. For this demonstration, we are going to find the global minimum of the sine function for the domain [0, 2π]. For the mathematically inclined, you could use techniques from calculus class to find that the answer is -1. Thus, if our algorithm&#39;s answer is not in the same ballpark as -1, then we know something went wrong.&lt;/p&gt;
&lt;h3&gt;State Spaces&lt;/h3&gt;
&lt;p&gt;Simulated annealing searches through a state space iteratively. An iterative algorithm begins with an initial guess. This guess is then potentially upgraded every iteration of the algorithm to produce a better approximation. For our demonstration, we&#39;ll end the algorithm after a fixed number of iterations.&lt;/p&gt;
&lt;p&gt;Taking care of the initial guess is easy--just choose a random valid state. From the initial guess, we&#39;ll need to find it&#39;s neighboring states and check to see if they&#39;re better. Disappointingly, there is no single method to derive neighboring states. We&#39;ll have to come up with a method specific to our problem.&lt;/p&gt;
&lt;p&gt;Here, I want to keep things simple. The implementation below adds a random number from the range [-0.1, 0.1] to the current state to generate the successor. I also wrap the new state value around if it exceeds the range [0, 2π].&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/8b9e5b6e999b5d77ef0acaadb1092a69.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Of course, you can experiment on your own. For example, try thinking of new ways to generate neighboring states.&lt;/p&gt;
&lt;h3&gt;Temperature Schedule Go Brrr&lt;/h3&gt;
&lt;p&gt;This temperature idea is what gives simulated annealing its name. The temperature value of the algorithm is analogous to the role of temperature when annealing metal. To anneal metal, the metal is first heated and then slowly cooled over time. This cooling process allows the metal to have improved ductility and reduced brittleness. By enduring a long cooling period, the metal is improved. Similarly, the rate at which the &amp;quot;heat&amp;quot; of the algorithm is decreased determines the accuracy of the approximation.&lt;/p&gt;
&lt;p&gt;The &amp;quot;heat&amp;quot; of the algorithm affects the probability that it will make a bad move on purpose. Surprisingly, the algorithm sometimes needs to make bad moves to reach the global optimum. Why? There is a chance that it might get stuck on a local optimum. By making bad moves, the algorithm can potentially stumble its way out of local optimum (but this isn&#39;t guaranteed).&lt;/p&gt;
&lt;p&gt;You can choose any number to be the initial temperature. The temperature schedule then determines how the temperature value will decrease every iteration. Like choosing neighboring states, there is no right way to decrease the temperature. The only rule of thumb is that the slower the temperature is dropped, the better the approximation will be. The tradeoff is that you&#39;ll have to wait longer to get an answer. Thus, choose something that short enough for your attention span and long enough to get a good answer.&lt;/p&gt;
&lt;p&gt;For our toy example, I choose to subtract an arbitrary number every iteration.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/cbae4d7960586428dd77b3514f444b1a.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Once again, feel free to get creative and try different initial values and schedules for your implementation.&lt;/p&gt;
&lt;h3&gt;Probabilistically Making Moves&lt;/h3&gt;
&lt;p&gt;Every iteration a neighboring state is generated. The algorithm will always replace the current state with the new state if it&#39;s better. As we just discussed, the new state may be worse--dragging us further away from an optimum. Yet, we want to randomly make some bad moves with some probability. The key to simulated annealing is that this probability is not constant. Rather, it on average decreases over time.&lt;/p&gt;
&lt;p&gt;The probability of choosing the new state is defined as the following formula:&lt;/p&gt;
&lt;p&gt;$$\exp(\frac{\bigtriangleup E}{T})$$&lt;/p&gt;
&lt;p&gt;Two parameters affect the probability The &amp;quot;change in E&amp;quot; parameter is the difference between the function applied with the potential new state and the function applied with the current state. The bigger this difference, the smaller the probability. The next parameter is the temperature value, which we&#39;ve already seen. Obviously, for every iteration of the algorithm, the temperature value will decrease--causing the probability to decrease slowly.&lt;/p&gt;
&lt;p&gt;As the temperature gets closer to zero, the probability of choosing a bad move will also get closer to zero. Towards the end, the algorithm will mostly take greedy moves towards better states. Once the temperature hits zero, then the algorithm is done. We can get our answer and go home.&lt;/p&gt;
&lt;h2&gt;Put Everything Together&lt;/h2&gt;
&lt;p&gt;We&#39;ve covered all the important parts of this algorithm. Let&#39;s put everything together and see it in action. Here is the full code for my solution.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/bc36402fa41ec7733e6758e1e6a241e6.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I decided to capture the state for every iteration and graph the result. As you can see, the initial state is nowhere near -1. As the algorithm progresses, it begins to slowly converge. Towards the end, the probability of choosing bad moves is near 0, which is why the downward slope for later iterations is steep.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.matthewparris.org/img/simulated_annealing_plot.svg&quot; alt=&quot;Simulated annealing plot&quot;&gt;&lt;/p&gt;
&lt;p&gt;For this run, I got a final state of 4.703329. The corresponding sine value is -0.9999590, which is close to -1. These two values match what we expected.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Coronavirus Brings Change, but the Church Brings Hope</title>
    <link href="https://www.matthewparris.org/coronavirus-brings-change-but-the-church-brings-hope/"/>
    <updated>2020-06-11T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/coronavirus-brings-change-but-the-church-brings-hope/</id>
    <content type="html">&lt;p&gt;Let&#39;s discuss briefly discuss the notion of change. I think the topic is relevant to our current circumstances. After all, since the coronavirus has invaded our lives, things haven&#39;t been the same. And so-called experts have been predicting that our lives will likely be altered moving forward even post COVID-19. The new normal is change--or is it?&lt;/p&gt;
&lt;p&gt;It seems change has always been busy flipping things upside down. Looking back, great ancient thinkers have been grappling with how our fragile, finite lives fit into what seems an infinitely long history. From the Greek philosopher Heraclitus: “No man ever steps in the same river twice, for it&#39;s not the same river and he&#39;s not the same man.” According to this philosophy, everything is always changing, but is this idea encouraging?&lt;/p&gt;
&lt;p&gt;Well, according to our conventional wisdom, change is at the very least uncomfortable. As is said, life begins at the end of your comfort zone. There&#39;s some truth to that statement, although I&#39;m sure we could come up with a better first cause to life itself. Nonetheless, by pushing the limits of our constructs, we do seem to on average end up with better outcomes. We make progress, and our culture praises and rewards progress.&lt;/p&gt;
&lt;p&gt;But with progress comes the doomsday scenarios. Technology, globalization, and other harbingers of the 21st century have brought us a virus that spreads faster than Amazon can ship packages. I know the economic downturn--with its losses in jobs for many Americans--have also purged hope from our lives. Many Millenials were already struggling to keep their heads above water. Other younger Americans are pessimistic about whether they will ever be able to own a house.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Change makes for a distant, indifferent god. Her fortunes are devoid of hope.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.matthewparris.org/img/why-millennials-are-not-homeowners.png&quot; alt=&quot;Chart showing why millennials can&#39;t own homes. Over 50% of millennials said they couldn&#39;t afford the down payment&quot;&gt;&lt;/p&gt;
&lt;p&gt;In an increasingly secular America, hope is poorly delineated, often left in abstract terms about ever more uncertain tomorrow. I guess we&#39;re all shooting for Mars. Progress must colonize the cosmos.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; These utopian visions of humanity don&#39;t seem to inject life-giving energy into our most poor and marginalized communities. And they don&#39;t seem to do much better for everyone else. All you have to do is look at recent trends around mental health. There seems to be an uptick in depression, suicides, and just general sadness compared to previous generations.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; I am particularly worried about men who attempt suicide at a rate of about 3.56x that of women.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;How can we embrace change and yet still have hope? Is life nothing more than a giant dice role? While society has attempted to remove the divine and other talismans from our daily affairs, defaulting to fatalism isn&#39;t so tempting. We want to do something to make things better. Many of us want to save our neighbors from the virus--look at the money lost and effort spent on social distancing.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; This notion of loving our neighbors sounds a lot like a Bible verse to me.&lt;/p&gt;
&lt;p&gt;While some have been quick to mock some Churches&#39; responses to the coronavirus,&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn6&quot; id=&quot;fnref6&quot;&gt;[6]&lt;/a&gt;&lt;/sup&gt; I have been encouraged by the community representing Christ&#39;s upsidedown kingdom.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn7&quot; id=&quot;fnref7&quot;&gt;[7]&lt;/a&gt;&lt;/sup&gt; Their prayers, words of encouragement, and impromptu worship sessions have been a salve--deflecting the general paranoia and frustration with government bureaucracy. Whatever is left of religion in America, it is still good at providing hope. According to certain tales, Jesus Christ is coming back someday to restore the universe to glory. In the meantime, death has still lost its sting. Critics may have argued that Christians are opting out of life, but I think we are making it livable right now.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnbc.com/2019/08/30/homeownership-eludes-millions-of-millennials-heres-why.html&quot;&gt;From this CNBC article:&lt;/a&gt; The homeownership rate among millennials, ages 25 to 34, is around 8 percentage points lower than it was for Gen Xers and baby boomers when they were in the same age group. &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.liebertpub.com/doi/abs/10.1089/space.2017.29009.emu?journalCode=space&quot;&gt;From Elon Musk:&lt;/a&gt; &amp;quot;I think there are really two fundamental paths. History is going to bifurcate along two directions. One path is we stay on Earth forever, and then there will be some eventual extinction event. I do not have an immediate doomsday prophecy, but eventually, history suggests, there will be some doomsday event. The alternative is to become a space-bearing civilization and a multi-planetary species, which I hope you would agree is the right way to go.&amp;quot; &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.nbcnews.com/health/health-news/major-depression-rise-among-everyone-new-data-shows-n873146&quot;&gt;From this NBC article:&lt;/a&gt; Major depression is on the rise among Americans from all age groups, but is rising fastest among teens and young adults, new health insurance data shows. &lt;a href=&quot;#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://afsp.org/suicide-statistics/&quot;&gt;Statistic is from the American Foundation of Suicide Prevention&lt;/a&gt;. It&#39;s up to date as of 2018 &lt;a href=&quot;#fnref4&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.usatoday.com/story/travel/destinations/2020/04/26/coronavirus-las-vegas-struggling-survive-without-tourists/3029747001/&quot;&gt;We shutdown the Las Vegas casinos!&lt;/a&gt; &lt;a href=&quot;#fnref5&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn6&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.nytimes.com/2020/03/27/opinion/coronavirus-trump-evangelicals.html&quot;&gt;This New York Times article is good example of the mocking&lt;/a&gt;: &amp;quot;Trump’s response to the pandemic has been haunted by the science denialism of his ultraconservative religious allies.&amp;quot; &lt;a href=&quot;#fnref6&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn7&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;As a side note, most churches did shutdown during coronavirus. &lt;a href=&quot;https://www.christianitytoday.com/news/2020/april/churches-defy-coronavirus-religious-liberty.html&quot;&gt;For example, according to Christianity Today&lt;/a&gt; &amp;quot;ninety-three percent of Protestant churches are closed in America, for fear of spreading COVID-19.&amp;quot; &lt;a href=&quot;#fnref7&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  
  <entry>
    <title>State Space Algorithm</title>
    <link href="https://www.matthewparris.org/state-space-algorithm/"/>
    <updated>2020-06-18T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/state-space-algorithm/</id>
    <content type="html">&lt;p&gt;Recently, I implemented the state space algorithm in &lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;. It&#39;s a simple algorithm that can find a goal state in n-dimensional &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclidean_space&quot;&gt;Euclidean space&lt;/a&gt;. All one needs is a computable function, a starting domain, and a goal value.&lt;/p&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;For example, let&#39;s say we want to find an input for cosine that gives us one of the zeros for the domain 0 to 2π. Of course, there&#39;s no need to use the algorithm in this case. We could look at a &lt;a href=&quot;https://en.wikipedia.org/wiki/Unit_circle&quot;&gt;unit circle&lt;/a&gt; and find that applying cosine with the value 3π/2 gives us zero. Alternatively, the value of π/2 works just as well. Shortly, we&#39;ll discover how the algorithm will nondeterministically return one of these two zeros--and in this case, we don&#39;t favor either state. Any zero will do.&lt;/p&gt;
&lt;p&gt;The main idea of the algorithm is to tighten the domain around a state that satisfies the goal. This process is done iteratively. Every crank, the code will generate K random guesses for a goal-satisfying state within the current domain. The K parameter has to be any positive integer, but you get to choose it. I recommend trying different values for K to see how that affects the outcome.&lt;/p&gt;
&lt;p&gt;The best state out of the set of K--i.e. the guess that gives an output closest to the goal--will be set aside. This guess is selected by finding the K range value that minimizes the formula below. Note that &lt;em&gt;y&lt;/em&gt; is the guess and &lt;em&gt;y&lt;sub&gt;g&lt;/sub&gt;&lt;/em&gt; is the goal value.&lt;/p&gt;
&lt;p&gt;$$|y - y_g|$$&lt;/p&gt;
&lt;p&gt;Obviously, in the beginning, the best state is likely far off from the goal state. The chance to generate a satisfiable guess increases as the domain shrinks around a goal-satisfying state, which happens every iteration.&lt;/p&gt;
&lt;p&gt;To get this new domain, there are a few steps to follow. First, let&#39;s find the average of the absolute values of the differences of the K range values and the goal value, which we&#39;ll call &lt;em&gt;u&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;$$u = \sum_{i=0}^{K} | y_i - y_g |$$&lt;/p&gt;
&lt;p&gt;Next, we&#39;ll need a so-called epsilon value to scale our new domain. To compute it, use the following formula:&lt;/p&gt;
&lt;p&gt;$$\epsilon = \frac{|y - y_g|}{u}$$&lt;/p&gt;
&lt;p&gt;The numerator is the absolute value of the difference of the best K range value and the goal--which we computed earlier. The denominator is the &lt;em&gt;u&lt;/em&gt; we just computed. So, you should only be plugging in numbers here.&lt;/p&gt;
&lt;p&gt;Finally, insert our prerequisite work into this formula to generate the new domain. Note that the &lt;em&gt;x&lt;/em&gt; is the best state out of the set of K states. The &lt;em&gt;b&lt;/em&gt; is the end value of the current domain; the &lt;em&gt;a&lt;/em&gt; is the beginnning of the domain.&lt;/p&gt;
&lt;p&gt;$$x \pm \epsilon \frac{b - a}{2}$$&lt;/p&gt;
&lt;p&gt;The algorithm will thus generate K range values and use the best one to create the new domain for the next iteration. We&#39;ll continue this process until one of the generated guesses is within an error bound that we choose.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Astute readers may have noticed that this is a variation of a beam search. According to Wikipedia, &lt;a href=&quot;https://en.wikipedia.org/wiki/Beam_search&quot;&gt;beam search&lt;/a&gt; is a heuristic search algorithm that explores a graph by expanding the most promising node in a limited set. In this case, our &amp;quot;graph&amp;quot; is the domain. Thus, we are working over a continuous space rather than a discrete space; however, since we can effectively reduce the search space, the algorithm works. Well, works is fudgey term. I believe that the algorithm can sometimes fail to find a solution since it isn&#39;t mathematically guarenteed to converge the domain around a goal-sastifying state. Increasing the K parameter should help--more guesses increases the chance of one them being good.&lt;/p&gt;
&lt;p&gt;Here is the code for my complete solution. As a reminder, the algorithm is looking for a zero of the cosine function for the domain 0 to 2π. To note, K is set to 3, and the error bound is set to .01.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/694ea127181205157f27261dd4508c57.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;For a single run, I got a state value of about 1.566, which is close to π/2. Since π/2 is one of the valid zeros, the algorithm&#39;s outcome is what we expected. You should keep in mind that it&#39;s possible to get a state value near 3π/2, the other zero. Consider running the algorithm multiple times to get a feel for how things work.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>4 Tips to Help Beginner Programmers</title>
    <link href="https://www.matthewparris.org/4-tips-to-help-beginner-programmers/"/>
    <updated>2020-06-26T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/4-tips-to-help-beginner-programmers/</id>
    <content type="html">&lt;p&gt;For this post, I am assuming you already have some programming skills, but feel stuck. There is a lot of stuff you could potentially learn. Yet, this diversity of options makes decision making difficult. What will give you the best bang for your buck, so to speak? Well, I am going to try giving some advice here. Some of this advice will be obvious, but sometimes we need to repeatedly hear common sense truths for them to sink into our psyche. Thus, programmers with years of experience may not find much value in this post, but my early college self would have eagerly absorbed the knowledge--maybe you&#39;ll find the tips useful too.&lt;/p&gt;
&lt;p&gt;To start, I&#39;m going to emphasize mastering the fundamentals. When in doubt, reviewing and strengthing your knowledge of the basics is never a bad idea. Hard problems are often combinations of simple problems. It will be easier to solve the monstrosities if we&#39;re not bellyflopping through the basic stuff.&lt;/p&gt;
&lt;h2&gt;Data Structures&lt;/h2&gt;
&lt;p&gt;Data structures are necessary to code much of anything--but it may be worth revisiting these building blocks. I find myself reusing the same ones over and over again. This repetitiveness isn&#39;t necessarily bad. If it&#39;s not broke, why fix it? Yet, there may be new levels to this ish if we dig a little deeper. For starters, make sure you&#39;ve mastered the basics. You will never run out of reasons to use arrays, linked lists, sets, hash tables, trees, graphs, heaps, etc. For the various structures, it may be worth reviewing the properties and time-complexities for their operations. You should be able to compare their pros and cons. For example, why use an array over a linked-list? Or vice-versa? Sure, knowing about data structures is cool; however, it&#39;s important you also know how to utilize them effectively in real-world applications.&lt;/p&gt;
&lt;h2&gt;Algorithms&lt;/h2&gt;
&lt;p&gt;Of course, once you know a bunch of data structures, you need to make use of them. Thus, let&#39;s bring on the algorithms. While investing time learning and implementing new algorithms is worth it, I would encourage you to learn &lt;a href=&quot;https://cs.lmu.edu/~ray/notes/algpatterns/&quot;&gt;algorithmic patterns&lt;/a&gt;. Some of the new problems you run into will look like problems you&#39;ve already seen. Be smart and leverage that knowledge instead of reinventing the wheel.&lt;/p&gt;
&lt;p&gt;In addition, you should already be familiar with measuring the runtime and space complexity of an algorithm using &lt;a href=&quot;http://www.cs.cornell.edu/courses/cs312/2004fa/lectures/lecture16.htm&quot;&gt;asymptotic analysis&lt;/a&gt;. Asymptotic analysis gives a machine-independent way of measuring performance. It&#39;s useful to say that mergesort has an \(O(n \log n)\) worse case running time, which is superior to bubble sort&#39;s \(O(n^2)\) worse case running time. If this notation looks like hieroglyphics to you, consider brushing up on this topic.&lt;/p&gt;
&lt;p&gt;I would also recommend people get comfortable using &lt;a href=&quot;https://www.cs.cmu.edu/~adamchik/15-121/lectures/Recursions/recursions.html&quot;&gt;recursion&lt;/a&gt;. Yes, it&#39;s not always useful and can sometimes make the code more convoluted. It can also have the opposite effect. Look at the recursive algorithm to solve the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tower_of_Hanoi#Iterative_solution&quot;&gt;Tower of Hanoi game&lt;/a&gt;--and then compare it to the iterative version. There are just some problems in the world that lend themselves to recursive solutions. Plus, it will help expand your mind. Challenging yourself is worth it in the long run.&lt;/p&gt;
&lt;h2&gt;Learn a New Language Paradigm&lt;/h2&gt;
&lt;p&gt;With a few exceptions here or there, most people are introduced to programming nowadays via an imperative, object-oriented language. This, once again, isn&#39;t necessarily bad. Examples include Java, JavaScript, Python, C++, C#, and Ruby. There&#39;s nothing wrong with any of these languages, and you could probably start your career by learning any of them.&lt;/p&gt;
&lt;p&gt;Yet, in my journey so far, I have found it insightful to learn new language paradigms. This could mean learning a whole new programming language or discovering previously unknown abilities in your current favorite language. Before I go any further, I should probably define some terms. After all, what do I mean by language paradigms?&lt;/p&gt;
&lt;p&gt;Language paradigms are a way to classify programming languages based on their features. To note, languages can fit into multiple paradigms--they need not be mutually exclusive.&lt;/p&gt;
&lt;p&gt;Object-oriented is an example of a paradigm. Most readers are probably already familiar with the notion of creating objects and defining the relationships between them. Yet, not all languages are object-oriented. It&#39;s worth it to explore. I recommend people try learning either a functional language or a logical language.&lt;/p&gt;
&lt;p&gt;An example of a functional language would include &lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;. If Racket&#39;s syntax doesn&#39;t terrify you, &lt;a href=&quot;https://www.matthewparris.org/state-space-algorithm/&quot;&gt;consider checking out some of the code examples elsewhere on my website&lt;/a&gt;. To note, functional languages place a lot of emphasis on applying and composing functions--and often make use of immutable data structures and recursion. Keeping in mind some of my earlier recommendations, you could knock many birds with one stone.&lt;/p&gt;
&lt;p&gt;Honestly, I&#39;ve haven&#39;t done much with logical languages. It&#39;s on my list of things I might learn one day. You, however, can one-up me by diving into one of these languages. An example would include &lt;a href=&quot;https://en.wikipedia.org/wiki/Prolog&quot;&gt;Prolog&lt;/a&gt;--but there are others. These languages solve problems using formal logic so be prepared to brush up on some math.&lt;/p&gt;
&lt;p&gt;There are many other language paradigms, and I am not going to attempt to mention all of them here. You could, for example, explore the difference between dynamically-typed languages and statically-typed languages. It&#39;s worth thinking about why type systems are useful in the first place. Another set of interesting paradigms would include imperative languages vs. declarative languages. I&#39;ve already mentioned imperative languages. They allow the programmer to explicitly set the program&#39;s state using statements. You&#39;re telling the computer what to do--step by step. In contrast, a programmer using a declarative language only tells the computer what they wanted to be computed, typically within the restraints of some problem domain. The computer then figures out how to solve the problem. Examples of this kind of language would include &lt;a href=&quot;https://en.wikipedia.org/wiki/Prolog&quot;&gt;Prolog&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL&quot;&gt;SQL&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Master Your Tools&lt;/h2&gt;
&lt;p&gt;I often overlook this one. Investing some time into mastering the tools and programs we use every day can pay dividends later on. It could be as simple as learning a few keyboard shortcuts. You should at the very least be comfortable in your favorite text editor--maybe use Google to try to find useful features you&#39;ve overlooked. I would also recommend figuring out how to use a version control system, such as &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;. If you know how to setup remote branches, fork projects, handle merge conflicts, and rebase, you may know more than many fresh computer science graduates. Trust me, I have stories. Bored of my suggestions so far? You can always just try new software. Download a new editor and mess around. Use a new framework. You&#39;ll probably learn something useful.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&#39;m going to end the post here, but there are obviously many other skills to work on. This list isn&#39;t meant to be complete. I mostly tackled topics I either covered in college or felt familiar with. Also, many of these sections are intentionally sparse. I am going to leave it up to you to do some research on your own. Hopefully, in the future, I can expand on some of these ideas in future posts.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Eating Meat: Evolution, Patterns, and Consequences</title>
    <link href="https://www.matthewparris.org/summary-of-eating-meat-evolution-patterns-and-consequences/"/>
    <updated>2020-07-03T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/summary-of-eating-meat-evolution-patterns-and-consequences/</id>
    <content type="html">&lt;p&gt;This blog post is a summary of Vaclav Smil&#39;s paper &lt;a href=&quot;http://vaclavsmil.com/wp-content/uploads/docs/smil-article-2002-pdr2003.pdf&quot;&gt;&lt;em&gt;Eating Meat: Evolution, Patterns, and Consequences&lt;/em&gt;&lt;/a&gt;. Although I eat meat, it should be noted that I am not an expert in meat. Thus, please take this summary with a grain of salt.&lt;/p&gt;
&lt;p&gt;As with any scientific article, the information may be wrong or out of date.   To note, this paper was published in 2002. Keep that in mind when I use words like &amp;quot;currently.&amp;quot;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Humans evolved to eat meat--and thus we should include at least some meat in our diet. Yet, meat isn&#39;t a requirement because humans can make up the needed nutrition from other sources.&lt;/p&gt;
&lt;p&gt;We eat meat for more than just nutritional requirements. To this day, meat acquisition is still considered a sign of success, and we share meat with others to create social bonds.&lt;/p&gt;
&lt;p&gt;The author lays out an ultimatum: meat is not neutral. Some cultures have revered killing and eating animals. Others, particularly religious aesthetics, have abhorred eating meat.&lt;/p&gt;
&lt;p&gt;Due to the way meat is produced, a civilization obsessed with meat puts itself at risk for spreading disease.&lt;/p&gt;
&lt;p&gt;The West tends to limit the scope of what we mean by meat. For affluent countries, it usually only refers to the meat of domesticated mammals and birds.&lt;/p&gt;
&lt;p&gt;Historically, humans have consumed more than just proteinous muscle. Culture has gotten progressively more choosy over time about which parts of the animal are acceptable to eat.&lt;/p&gt;
&lt;p&gt;Fatty meats provide more energy and palatability. This is partially why greasy fast food is addicting--it&#39;s full of fat.&lt;/p&gt;
&lt;p&gt;The author concludes that affluent countries are consuming too much meat. In a sense, humans used to complement their diets with meat. We now dominate our diets with meat.&lt;/p&gt;
&lt;h2&gt;Evolutionary heritage and preagricultural meat consumption&lt;/h2&gt;
&lt;p&gt;A long time ago, humans learned how to use fire. The ability to cook meat greatly increased ancient humanity&#39;s meat-eating opportunities.&lt;/p&gt;
&lt;p&gt;Humans learned to kill large herbivores because they provided a lot of fatty, energy-dense meat. These herbivores could be killed without using weapons--just simply drive them off a cliff.&lt;/p&gt;
&lt;p&gt;The origins of human intelligence are linked to meat. Cognitive ability was likely needed for humans to coordinate the sharing of meat within a group.&lt;/p&gt;
&lt;p&gt;Humans have abnormally large brains. To support the growth of this organ, it is hypothesized that another organ had to be downsized. Possibly, our gastrointestinal tracts were shrunk to give more metabolic energy to the brain. With a smaller tract, an animal can&#39;t digest as effectively. Thus, this change would have caused humans to seek more energy-dense food.&lt;/p&gt;
&lt;p&gt;Different human cultures ate different amounts of meat, and thus there was a wide range of per-capita meat/protein intakes.
Meat in traditional agricultural societies
About 10,000 years ago, humans learned how to farm. Farming food increased the population density but simultaneously decreased the average quality of nutrition.&lt;/p&gt;
&lt;p&gt;Even among rich European households in the late 18th century, eating meat was quite rare. Peasants may only have eaten meat 2 or 3 times a year.&lt;/p&gt;
&lt;p&gt;Around the 1930s, meat supplied only around 2% of all food energy.&lt;/p&gt;
&lt;h2&gt;Modern dietary transition and its outcomes&lt;/h2&gt;
&lt;p&gt;Diets started to change in Europe around the mid 19th century. Markedly, there was a dramatic increase in meat consumption, which was driven by the combined forces of improved agricultural productivity, rapid industrialization, and widespread urbanization.&lt;/p&gt;
&lt;p&gt;The pace of worldwide dietary change increased after World World II because mechanized agriculture was aggressively subsidized.&lt;/p&gt;
&lt;p&gt;The first refrigerated shipments of meat began in the 1870s, which helped the expansion of worldwide meat trade.&lt;/p&gt;
&lt;p&gt;In the Western world, we mostly only eat beef, pork, or poultry. The consumption of other meats has been steadily declining over the years.&lt;/p&gt;
&lt;p&gt;By the end of the 20th century, the population of affluent countries represented only one-fifth of the global total but produced and consumed two-fifths of all red meat and three-fifths of all poultry.&lt;/p&gt;
&lt;p&gt;To produce more meat, humans ironically need to produce more grain to feed the animals. Thus, meat is not a perfect substitute for plants; they&#39;re complements.&lt;/p&gt;
&lt;h2&gt;Animal feeding requirements&lt;/h2&gt;
&lt;p&gt;There is a tradeoff when feeding grain crops to animals. For example, if foodgrains were cultivated instead of feed crops, we would produce more digestible energy and protein. Yet, animals produce higher quality protein.&lt;/p&gt;
&lt;p&gt;Cows suck at turning feed grain into meat. They consume about 50% more energy than pigs. Chickens are the best converters of plant-to-animal protein--at about 20% efficiency.&lt;/p&gt;
&lt;p&gt;Overall, the three major animals--cows, pigs, and chickens--are extremely inefficient at creating protein. About 80 to 96% of plant protein consumed is not converted to animal protein.&lt;/p&gt;
&lt;h2&gt;Environmental consequences of meat production&lt;/h2&gt;
&lt;p&gt;Nowadays, humans eat so much meat that domestic animals have become the dominant class of vertebrates on Earth. In summary, there&#39;s a lot of cows.&lt;/p&gt;
&lt;p&gt;With current crop yields and feeding practices, the entire world cannot eat meat at the same rate as the affluent countries. To achieve meat-eating for all, we would need to make advances in bioengineering.&lt;/p&gt;
&lt;p&gt;The number of feed crops fed to animals could feed approximately 3 billion additional humans. In a way, it&#39;s tempting to try switch people to a mostly plant-based diet. The only problem is that humans like eating meat and would be unlikely to change our diet preferences in mass.&lt;/p&gt;
&lt;p&gt;One needs large amounts of water to raise animals and grow feed crops. Thus, meat/grain trade can benefit countries with scarce water resources. This situation can potentially set up a comparative advantage in trade for water-rich producers.&lt;/p&gt;
&lt;p&gt;The main factor limiting the size and density of animal production is our inability to dispose of wastes effectively.&lt;/p&gt;
&lt;h2&gt;Health implications of meat production and consumption&lt;/h2&gt;
&lt;p&gt;Most of the animals we eat are social animals--and this leads to various ethical dilemmas. Modern farming techniques don&#39;t exactly take good care of the animals.&lt;/p&gt;
&lt;p&gt;Meatpacking is one of the most dangerous occupations in the country. In 2000, about 25% of meatpacking employees, or about 4 times the private industry average, had nonfatal injuries or illness. Serious injuries occur at about 5 times the private industry average.&lt;/p&gt;
&lt;p&gt;Obesity in adults was stable between 1960 and 1980--at about 25% of the population. In the 1980s, this percentage rose by 8 points. By the 1990s, every third adult in the United States was obese.&lt;/p&gt;
&lt;p&gt;Many meals in the United States are high in fat. The author blames beef&#39;s high lipid content and our preference for fast food.&lt;/p&gt;
&lt;p&gt;We use more antibiotics on animals than on humans. This practice could potentially lead to bacteria gaining immunity to essential antibiotics.&lt;/p&gt;
&lt;h2&gt;Possible adjustments&lt;/h2&gt;
&lt;p&gt;During the last four decades, humans have tripled our meat production.&lt;/p&gt;
&lt;p&gt;Over time, our diets have become less disciplined--which has gone hand-in-hand with obese people claiming to be victims.&lt;/p&gt;
&lt;p&gt;There is no scientifically defensible reason for strict vegetarianism. Conversely, there is no defensible reason for the amount of meat currently prevailing in Western diets. These meaty diets do not make people healthier or prolong their lives.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Everybody Hates Recursion</title>
    <link href="https://www.matthewparris.org/everybody-hates-recursion/"/>
    <updated>2020-07-10T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/everybody-hates-recursion/</id>
    <content type="html">&lt;p&gt;Everybody hates recursion. Well, maybe I&#39;m exaggerating but the technique is often dismissed as useless and complicated. You may be thinking: &amp;quot;I&#39;ll just keep my loops please.&amp;quot; And there&#39;s nothing wrong with that. In many situations, loops or higher-order functions are the natural solution. Not to mention, some languages have poor support for recursion—but I&#39;ll dive into that part later.&lt;/p&gt;
&lt;h2&gt;But Why?&lt;/h2&gt;
&lt;p&gt;So, why should you even bother with the esoteric technique? I&#39;ll list a few reasons. For one, some problems can easily be expressed recursively—the &lt;a href=&quot;https://en.wikipedia.org/wiki/Tower_of_Hanoi&quot;&gt;Tower of Hanoi&lt;/a&gt; puzzle quickly comes to mind. Second, some programming languages emphasize recursion as a key language feature. This is true for many functional programming languages. For example, it is one of the things that tripped me up when learning &lt;a href=&quot;https://racket-lang.org/&quot;&gt;Racket&lt;/a&gt;, a modern implementation of Scheme. The language has no looping constructs, so you&#39;re often forced into using recursion. Finally, I think it&#39;s good to learn new things. Why stay stagnant? The world is worth exploring.&lt;/p&gt;
&lt;h2&gt;Explain It Please&lt;/h2&gt;
&lt;p&gt;To solve a problem using recursion, it must take on a pattern, which I&#39;ll describe here. For one, the technique assumes that the problem can be broken down into smaller versions of the same problem. At some point, the breakdown process can no longer continue because an axiomatic form of the problem is reached. We&#39;ll call this fully simplified form a base case. These base cases—there can be more than one—are hardcoded by the programmer. Every recursive function needs at least one base case. Otherwise, it&#39;s as if you wrote an infinite loop. Of course, you also need a self call—i.e., you call the function within the same function&#39;s body. Usually, the self call will grapple with a reduced version of the problem—this should obviously tie into the work on a smaller problem idea. Once the recursive function is called with a state corresponding to a base case, the function returns some special value, and the chain of function calls is finitely capped.&lt;/p&gt;
&lt;h2&gt;Factorials&lt;/h2&gt;
&lt;p&gt;I am going to interrupt our train of thought to inject an example. So, let’s stare at this code representing the &lt;a href=&quot;https://en.wikipedia.org/wiki/Factorial&quot;&gt;factorial function&lt;/a&gt;. For contingency reasons, in case your highschool math teacher failed you, I’ll explain this super quick. Say we want to compute one factorial. Well, that’s just one--and hint, it’s one of the base cases. But what if you want to compute 2 factorial. Then, you simply take 2 * 1. Following the pattern, three factorial is 3 * 2 * 1. Yeah, there&#39;s not much to this. The formal definition is that the factorial of a positive integer &lt;em&gt;n&lt;/em&gt;, denoted by &lt;em&gt;n!&lt;/em&gt;, is the product of all positive integers less than or equal to &lt;em&gt;n&lt;/em&gt;. As an aside, we randomly assign that zero factorial is equal to one--this is the other base case. Ok, some code stuff.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/831585008fcef792e71420a8b9345e9b.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Hopefully, the base case and the self call are obvious. If you&#39;re confused about how the code works, I recommend getting out a sheet of paper and tracing out what happens for different inputs. Also, please note that the $n parameter must be greater than zero. Otherwise, everything will break because the factorial sequence is only defined for positive values and zero.&lt;/p&gt;
&lt;h2&gt;The Call Stack&lt;/h2&gt;
&lt;p&gt;It&#39;s important to note that each time a function is called, information about it must be pushed onto the &lt;a href=&quot;https://en.wikipedia.org/wiki/Call_stack&quot;&gt;call stack&lt;/a&gt;. For the uninitiated, I&#39;ll briefly explain this process. To start, there&#39;s nothing special about this &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;stack&lt;/a&gt;--we are still pushing and popping. In this case, we are pushing frames onto the stack that contain information about the function such as its parameters, its local variables, and a return address.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; The call stack&#39;s implementation is language and machine specific so let&#39;s not get lost in the details. Basically, frames are pushed and then popped from the call stack as functions begin and end execution respectively. Cool, but why do we care? Well, these frames take up memory—and the computer only has a finite amount of memory. Therefore, there is going to be some hard cap on the number function calls that can be nested. If the computer runs out space for a new frame, then a stack overflow error will be thrown by most languages. Usually, recursive functions are prone to these types of errors—not because the programmer made a mistake—but due to the natural limitations of nesting large amounts of function calls.&lt;/p&gt;
&lt;h2&gt;Tail Call Optimization&lt;/h2&gt;
&lt;p&gt;While many people simply hate recursion due to personal preferences, there are times where using the technique is a bad idea. As I just mentioned, information about function calls has to be pushed onto the call stack, which takes up memory. Many languages have arbitrary limits on the depth of the call stack. For example, &lt;a href=&quot;https://www.geeksforgeeks.org/python-handling-recursion-limit/&quot;&gt;Python sets its limit at about 1000 before triggering a stack overflow&lt;/a&gt;. Thus, memory usage is a huge issue when using recursion. In contrast, iterative techniques, such as for loops, don&#39;t have this problem because they only require a constant amount of memory regardless of the number of repetitions. But don&#39;t worry about this sad news. Some languages implement an idea called tail call optimization that can save us.&lt;/p&gt;
&lt;p&gt;Assuming the language has tail call optimization, a tail recursive function will only take up constant space on the call stack. Although simple, the concept seems to confuse many people. The self call has to be the last operation of the function. Importantly, this does not mean the last line. For an example, review the factorial function from earlier. The last operation is the multiplication, not the function call.&lt;/p&gt;
&lt;p&gt;To convert our factorial function to be tail recursive, a few changes have to be made. Importantly--and this is worth repeating--the self call has to be the last operation. To pull this off, it turns out an extra parameter has to added to track the accumulated changes to the answer. Let&#39;s just look at the code.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/56b8690b39c517ac0fff043a3e996088.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Proving the Constant Space Hypothesis&lt;/h2&gt;
&lt;p&gt;So what makes tail recursive functions noteworthy? After all, like all functions, they must be allocated on the call stack.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; Yet, something special happens when nesting these types of functions: the final nested function call’s return value will be the final answer. To prove I&#39;m not making stuff up, study the following diagram of a call stack for the tail recursive factorial function.&lt;/p&gt;
&lt;img src=&quot;https://www.matthewparris.org/img/factorial_tail_call_stack.svg&quot; style=&quot;max-width:193px&quot;&gt;
&lt;p&gt;From the diagram, it&#39;s obvious that the final frame will have a return value of six, the final answer. If we bothered to maintain all the frames and bubble the value back down, then the six would get funneled straight through. Thus, there is no point in keeping the early frames. We can safely discard them.&lt;/p&gt;
&lt;p&gt;Now, let&#39;s imagine a bad situation. If the function isn&#39;t tail recursive, then you&#39;ll have to store all the frames and backsubstitute to get the answer. We can&#39;t prematurely pop off the early frames because we need information from later calls to complete the last operation. Try getting out a piece of paper and tracing the non-tail recursive factorial function to see why this is the case.&lt;/p&gt;
&lt;p&gt;Now, disappointingly perhaps, a lot of programming languages do not implement tail call optimization--and this includes most imperative languages. In most cases, you can find out if a language has tail call optimization with a Google search. Alternatively, I guess you could execute a deeply nested recursive function and see if you get a stack overflow error.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks for reading my ramblings about recursion. On one level, it’s not so hard. Your function only needs three properties to be recursive and useful: it must have at least one base case, it must call itself, and the input must be reduced for each subsequent self call. They are a great way to solve problems that built from smaller identical subproblems. Yet, I wouldn&#39;t force the technique when it&#39;s not needed. Without tail call optimization, recursion is way less powerful. In fact, I would recommend experimenting with recusion using a functional programming language. These languages are built around function calls and are often dependent on recursion for doing iteration. Anyway, I hope this guide in­spires you to play around with this con­cept.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;To note, the return address is like a bookmark that designates to the computer where to jump back to after the function call ends. &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Ok, so in real life, there are multiple different ways to implement tail call optimization. The programming language isn&#39;t necessarily prematurely dropping stack frames. Yet, the ideas I show here give an intuition about why we can even attempt the optimization. &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  
  <entry>
    <title>The Tower of Hanoi</title>
    <link href="https://www.matthewparris.org/the-tower-of-hanoi/"/>
    <updated>2020-07-18T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/the-tower-of-hanoi/</id>
    <content type="html">&lt;p&gt;The Tower of Hanoi is a mathematical puzzle, often introduced to undergraduate college students. At face value, the puzzle seems pointless. You are simply moving discs around. Yet, something is interesting about the puzzle&#39;s nature. After careful inspection, it turns out we can conjure up a concise recursive algorithm. If your not familiar with recursion, consider &lt;a href=&quot;https://www.matthewparris.org/everybody-hates-recursion&quot;&gt;checking out my previous post&lt;/a&gt;. In a nutshell, recursion is useful when a problem can be broken down into smaller problems of the same form as the original. With some imagination, the Tower of Hanoi meets this requirement.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;And you may be wondering why you should care. After all, there is an iterative solution to the puzzle—just do a Google search. Well, this toy problem shows that recursion can inspire simpler code than iteration. Although I&#39;m not going to cover the iterative solution explicitly here, you should look it up. By comparing the two solutions, it&#39;s clear that the recursive one features less code and easier to read.&lt;/p&gt;
&lt;p&gt;Given the paragraph above, I am going to emphasize that recursion isn&#39;t a superfluous, complicated technique. It has legitimate uses in the real world. If it will make your code easier to write and understand, consider using it. Now, it&#39;s not always better. You should also be aware of the performance tradeoffs—particularly in languages without &lt;a href=&quot;https://www.matthewparris.org/everybody-hates-recursion&quot;&gt;tail call optimization&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Rules&lt;/h2&gt;
&lt;p&gt;For those unfamiliar with the puzzle, I&#39;ll quickly explain the rules. There is a board with three poles and an arrangement of disks. The disks are each of a different size, and initially, they are arranged in a cone shape on a single pole. The goal is to move all the disks--one at a time--to another a pole, once again forming the cone shape. Also, a larger disk cannot be stacked on top of a smaller disk at any time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.matthewparris.org/img/tower-of-hanoi-init.jpg&quot; alt=&quot;Initial state for the Tower of Hanoi Puzzle&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Recursive Solution&lt;/h2&gt;
&lt;p&gt;Once again, the Tower of Hanoi can be solved recursively. It works because we can split the game into subpuzzles. These subpuzzles are themselves a miniversion of The Tower of Hanoi--which can then be solved in the same fashion as the bigger version. To note, the algorithm will always produce a valid set of game-winning moves. So you can win the game every time.&lt;/p&gt;
&lt;p&gt;Before jumping into the code, let&#39;s imagine what the solution&#39;s structure could look like. To start, we&#39;ll label the three poles A, B, and C. Then, let&#39;s say there&#39;s a stack of h disks on pole A. This arrangement is the initial setup--no surprises here. As a reminder, to win, the player needs to move all the disks to another pole.&lt;/p&gt;
&lt;p&gt;Yet, to move pole A&#39;s largest disk, h-1 disks need to be shuffled to an auxiliary pole--let&#39;s say pole B. Of course, this is just solving a slightly smaller version of the same puzzle. So, we need to move h-2 disks somewhere... You should see where this is going.&lt;/p&gt;
&lt;p&gt;What happens when we have reduced our way to subpuzzle consisting of one disk? This situation is the easiest to handle--just move directly move the disk to the target pole--in this case pole C.&lt;/p&gt;
&lt;p&gt;Now, in general, once the largest disk of a subpuzzle has moved been moved the target pole, we can then move all the disks placed on the auxiliary pole over to the target pole as well. To do this, we are again just solving a smaller version of the puzzle--we are just changing which poles are labeled as the auxiliary and the target.&lt;/p&gt;
&lt;p&gt;In summary, we are repeatedly moving the large disk of a subpuzzle after the smaller disks above have been moved to the auxiliary pole. The key is to correctly track which poles should be the target and the auxiliary as the algorithm twists through the self calls. Assuming we do this correctly, the puzzle will be solved by solving all the subpuzzles in turn.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.matthewparris.org/img/tower-of-hanoi-solution.gif&quot; alt=&quot;An animation showing a solution to the three disk version of the Tower of Hanoi puzzle&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Some Code&lt;/h2&gt;
&lt;p&gt;Let&#39;s stop talking theory and look at some code. Below, I wrote a solution in Racket that allows you to change the number of disks. Since immutable data structures are used, the code is a little different than what you typically find on the Internet; however, the core concepts are still the same. You should be able to map my natural language description to the code. At the very least, note what the base case is and how the problem space is reduced every self call.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/7fd6a4af66ce033db9783d31451b38b8.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Here&#39;s the output from the code--with the size parameter set to three. The left-hand side is the top of each stack. With a little squinting, you should be able to trace out the correct series of moves to solve the puzzle.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.matthewparris.org/img/tower-of-hanoi-output.jpg&quot; alt=&quot;The console output showing the steps to solve the three disk version of the Tower of Hanoi puzzle&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Group Project Survival Guide</title>
    <link href="https://www.matthewparris.org/group-project-survival-guide/"/>
    <updated>2020-07-27T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/group-project-survival-guide/</id>
    <content type="html">&lt;p&gt;I vaguely remember chilling in an afternoon class, trying to stay awake. My hand steadily sketched out notes as the professor rambled about computer algorithms or something. Then, randomly, the professor charged us to work with a neighbor to examine a problem just scribbled on the board. Sigh. I wasn’t sitting next to a friend. The girl adjacent to me seemed equally as uninterested. Assuming my memory is correct, neither of us choked up words. I at least had the problem written in my notebook—and enough sense to write out part of an answer. Luckily, we were not called upon to present anything.&lt;/p&gt;
&lt;p&gt;Why even bring up this memory? Well, I wanted to show a clear example where I did everything wrong in a group setting. As long time acquaintances know, I am a quintessential introvert—talking isn’t my forte. Yet, I don’t bring up this awkward interaction to put down me or my partner. Instead, I instead want to focus on my growth. I got better guys! This essay is an opportunity for you to learn from my past failures, so you don’t make the same mistakes. Let&#39;s jump into this.&lt;/p&gt;
&lt;h2&gt;For Starters&lt;/h2&gt;
&lt;p&gt;For one, you can actually be friendly and act like a person. I tended to be passive early in college, expecting others to initiate conversations. Sure, in most group projects, people will talk—a lot. Usually, at least one person will take charge and make sure everyone (who cares) gets a piece of the pie. But this doesn’t always happen. Sometimes, the group is distracted or just plain inept. Also, you might have the best ideas, which should be voiced. It will help everyone if you speak up.&lt;/p&gt;
&lt;h2&gt;Setup a Communication Channel&lt;/h2&gt;
&lt;p&gt;Please—for the love of everything good—don’t use email to communicate with a group of college students. It will not work. I recommend switching to a hipper social technology as soon as possible. Consider exchanging phone numbers, creating a Slack workspace, or firing up a Discord server, among other options. You can always block them later.&lt;/p&gt;
&lt;p&gt;Once you have a communication channel setup, you should use it. A silent chat isn’t a useful one. Share the progress you are making on the project and ask questions. If you need something, like access to a file, let people know. Tell the group how you fixed that one problem, so others don’t fall into the same predicament. Take some responsibility and make the ride smoother for the team.&lt;/p&gt;
&lt;p&gt;Inevitably, someone will ask for the project’s due date—so be prepared to share it. While you&#39;re at it, try to keep on topic. For example, don’t share memes or personal epitats without permission. Like read the room bruh. Also, don’t flirt with people or post offensive material. The space should be kept professional and comfortable for everyone.&lt;/p&gt;
&lt;h2&gt;Meet in Person?&lt;/h2&gt;
&lt;p&gt;Relatively early on, consider asking for people’s availability times. This tip is especially helpful if you&#39;re going to meetup multiple times. To prove this point, let’s consider the craziness of college schedules. So, hypothetically, Joe has band practice. Jessica has yoga. George has 17 tests and a paper due every day of the week for the month of February. Oh, all of them also work jobs. It can be difficult, to say the least, to find a time that works for the group. Luckily, &lt;a href=&quot;https://www.when2meet.com/&quot;&gt;there are some scheduling tools that can help out&lt;/a&gt;—but at least ask.&lt;/p&gt;
&lt;p&gt;For larger projects, consider scheduling in-person meetings if needed. You should try to hold the meeting in a productive location, so don’t go chill out in someone’s dorm room. Once all your group members arrive, you might ask if anyone has any questions or needs clarification on anything. They’ll probably lie or be too unorganized to give a good response—but there’s a chance you could avoid a problem or two.&lt;/p&gt;
&lt;p&gt;While in the meeting, be courteous of everyone’s time. Keep the meeting short. Also, consider checking if anyone needs to leave early. Your group can then let these people contribute first, and let them know any important information before he or she takes off.&lt;/p&gt;
&lt;h2&gt;Divide the Work&lt;/h2&gt;
&lt;p&gt;While y&#39;all are in one place, try to break up the work into independent, even pieces. If your team can pull this off well, each piece can fit together like a puzzle with little modification. (In computer science speak, try to avoid a merge conflict.) This technique also minimizes the amount of communication needed. If possible, try to match group members to pieces they find interesting or are good at doing. This isn’t always possible, so don’t fret too much if someone is assigned something they don’t enjoy.&lt;/p&gt;
&lt;h2&gt;Follow Up&lt;/h2&gt;
&lt;p&gt;Encourage people to follow up after the meeting. As a plus, this tip will help people who suck at thinking quickly in the moment. Try to make these types of people feel included. It would be a loss to the team to lose out on their ideas.&lt;/p&gt;
&lt;h2&gt;Spark Some Creativity&lt;/h2&gt;
&lt;p&gt;Sometimes, the project will go smoothly—decisions will be made, and people will finish their work on time. Other times, the group gets stuck. The ideas flowing are just bad, but don’t fret. You can try a few things.&lt;/p&gt;
&lt;p&gt;For one, before a meeting, you could brainstorm. Try making a list of ideas before showing up. You don&#39;t have to pitch all of them, but you&#39;ll hopefully have a few decent things to share.&lt;/p&gt;
&lt;p&gt;At the meeting, share all your ideas, even if you think their stupid. It&#39;s hard to know how good an idea is without sharing it with other people. For example, I had a dumb idea for a key recognition app. Let me explain. You probably have a key ring full of keys. Over time, you might forget which key belongs to what door. The app would allow the labeling of the key, so it&#39;s owner could refresh their memory in a convenient way. I thought the idea was polarizing and left it sitting in my digital notepad. Yet, when I pitched this idea for a class project, the team actually decided to tackle it. Take a chance and speak up.&lt;/p&gt;
&lt;p&gt;If all else fails, consider making a prototype and show it to the team. It doesn&#39;t have something time consuming—maybe a PowerPoint slide or two. I once was in a group where we had to write a paragraph length description. This isn&#39;t hard, but we couldn&#39;t agree on a topic. I ended up scribbling out a rough draft for an idea I liked. The group, perhaps out of laziness, accepted my idea.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As Kendrick says, stay humble. Be willing to learn from others. Listen to them. Please don&#39;t unilaterally make decisions for the whole group. Try to get others involved—or else they will loathe you. People herding is hard, and problems will arise. Out of personal experience, I recommend confronting group members in private, rather than putting them on blast in front of everyone. Keep the feedback constructive. Build people up, and praise them in public. Also, my advice isn&#39;t meant to be taken literally. Push yourself but don&#39;t force things on the group. It will all work out fine.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learning New Programming Languages</title>
    <link href="https://www.matthewparris.org/learning-new-programming-languages/"/>
    <updated>2020-08-11T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/learning-new-programming-languages/</id>
    <content type="html">&lt;p&gt;I wouldn&#39;t brand yourself as a programmer who knows x language or y framework. This mindset limits your opportunities. Rather, it&#39;s better to be able to learn new things on the fly—as &amp;quot;technology is always changing&amp;quot;. Even in my short lifetime, I can come up with tech that has bit the dust. Anyone still using Adobe Flash Player?&lt;/p&gt;
&lt;p&gt;At the same time, it&#39;s hard to change. If you&#39;ve been coding in the same language for years, the new thing probably feels transient. The return on investment is hard to calculate—what will you get out of it? After all, at some level, most programming languages kinda do the same thing.&lt;/p&gt;
&lt;p&gt;Well, a simple answer is that it makes you more employable. Over time, companies are transitioning to newer technologies. These technologies may not be better per say—but their popularity makes it easier to find tutorials, packages, etc.&lt;/p&gt;
&lt;p&gt;Also, once you learn a programming language or two, it&#39;s easy to pick up more. Granted, it&#39;s smoother to jump between languages from the same paradigm—or influenced from the same predecessor. To a point, this is why I encourage people to master the fundamentals. They travel between languages.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Of course, there are better reasons to learn new languages than to stuff your resume with buzzwords. You can become a better, more well-rounded developer.&lt;/p&gt;
&lt;p&gt;Some languages are better at some things than others. Thus, by knowing more languages, you&#39;re able more effectively judge which one is better for a given task. Like, I wouldn&#39;t use Erlang to do heavy processing with strings, or Python to perform CPU intensive calculations.&lt;/p&gt;
&lt;p&gt;In a way, packages are more important than the language. Nowadays, computers are so complicated that no one person can understand the system front to back. And there&#39;s no point to being computer-omniscient. We build software on top of abstractions—assembling the product piece by piece.&lt;/p&gt;
&lt;p&gt;Thus, today, the language&#39;s ecosystem matters more than its beauty.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Arguably, they are becoming a glue layer for combining packages. Without quality, up-to-date packages, the language is basically dead for mainstream use. Consequently, we just aren&#39;t aware of all the code in the system—that&#39;s fine. Hopefully, someone else is maintaining that stuff.&lt;/p&gt;
&lt;p&gt;Plus, the future is uncertain. Over the last few weeks, I&#39;ve watched a handful of videos demonstrating the capabilities of GTP-3. Sure, they&#39;re probably cherry picking the best examples, but it&#39;s still impressive. Even if the future still leaves room for the creativity of human programmers, we will likely have to shift with the times. AI powered tooling is coming. I doubt it will replace the profession anytime soon—real software is much too complex. Yet, we should remain aware.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Some Tips&lt;/h2&gt;
&lt;p&gt;Ok, now that I&#39;ve motivated you to learn things, let&#39;s go through some tips.&lt;/p&gt;
&lt;p&gt;An obvious first step would be to find official documentation for the language in question. This documentation will often be found on the language&#39;s official website. While usually good reference material, the documentation is not always useful as learning material. Don&#39;t get stuck in the trap of reading and trying to memorize language constructs. You need to take action—I like to implement small projects, data structures, or some algorithm.&lt;/p&gt;
&lt;p&gt;Importantly, the documentation will hopefully list out the standard library. For me, the hardest parts of a language to learn are its libraries and it&#39;s idioms. Some programming languages encourage particular approaches to solving a problem—you&#39;ll pick up the nuances with practice. To help with this, consider glancing through other people&#39;s code. You can get a feel for what to strive for by reading well-written code.&lt;/p&gt;
&lt;p&gt;On that note, &lt;a href=&quot;https://genius.com/9246800&quot;&gt;&amp;quot;Google&#39;s your friend bruh.&amp;quot;&lt;/a&gt; There are a million blogs, tutorials, videos, open source projects on the Internet. For those more old school, books exist. Just pick something and stick with it. Implement that tutorial and try to change the code.&lt;/p&gt;
&lt;p&gt;Also, make sure you&#39;re looking at the documentation for the correct version. The docs for version two instead of three are—well—not helpful.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I&#39;m being a bit bold here. Yet, I feel like it&#39;s true that &amp;quot;better&amp;quot; programming languages often struggle to get and maintain a foothold. There is a lot of languages, and the popular ones usually gained status due to historical quirks. &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I&#39;m not a AI doomsday person--yet. But, I do think that future languages will gain popularity via how well they cooperate with tomorrow&#39;s AI-based tooling. &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  
  <entry>
    <title>Using PHP and MySQL with Docker</title>
    <link href="https://www.matthewparris.org/using-php-and-mysql-with-docker/"/>
    <updated>2020-09-25T19:00:00-05:00</updated>
    <id>https://www.matthewparris.org/using-php-and-mysql-with-docker/</id>
    <content type="html">&lt;p&gt;Recently, I’ve been doing some work with containers. For the uninitiated, a container is like a virtual machine because your application is run in an isolated, consistent environment. Yet, this environment is more lightweight than a virtual machine. It utilizes the underlying operating system rather than running an entire operating system for each application. Thus, containers are cheap-ish to spin up and easy to share.&lt;/p&gt;
&lt;p&gt;The most common platform for creating containers is Docker so that’s what I’ll be using here. &lt;a href=&quot;https://www.docker.com/get-started&quot;&gt;You can install Docker from this link.&lt;/a&gt; Warning though: If you have Windows Home Edition, you will need Windows Subsystem for Linux Version 2 to run the latest version of Docker. Those on *nix systems should be able to just install the software.&lt;/p&gt;
&lt;h2&gt;Database Setup&lt;/h2&gt;
&lt;p&gt;Let’s start by setting up the database. For this part of the tutorial, I’m assuming you have some knowledge of SQL; however, you should just be able to blindly copy and paste in the text. I’m putting all my work in a folder called tutorial. Also, you will have to make a few more folders and files to follow along to the end—just a forewarning.&lt;/p&gt;
&lt;p&gt;To begin, we are going to need an image to form the base of our container. In Docker, an image is basically a file system and some settings. Each container will get its own virtual file system separate from your actual one, and it is remade fresh every time a container is spun up. If you want your containers to access persistent storage or mount to your actual filesystem, you&#39;ll have to look into volumes. I&#39;m not going to use a volume here, but it&#39;s something you should be aware of.&lt;/p&gt;
&lt;p&gt;Now, Docker manages the lifecycle of a container, but it also acts as a package manager for images. Thus, we don’t have to make our own from scratch. Instead, we can use and extend existing images. For our needs here, we’ll extend a basic MySQL image, &lt;a href=&quot;https://hub.docker.com/_/mysql&quot;&gt;which can be found on the Docker Hub website.&lt;/a&gt; The website will give some basic information about the image; we mostly care about the image name, the available tags, and the environment variables.&lt;/p&gt;
&lt;p&gt;To create a new image, we’ll need to create a YAML file, commonly known as a Dockerfile. This file contains various commands to create a container. Don&#39;t worry—I’m going to provide the files needed for our adventure, including this Dockerfile, with some explanatory comments. Also, &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;the Docker website provides a reference&lt;/a&gt; if you would like to go into more detail. This guide only provides a relatively high-level overview of Docker.&lt;/p&gt;
&lt;p&gt;Here is the Dockerfile itself.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/161a68d68e10967a4e853edbeb75614e.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;And you’ll need the requisite SQL file. I’ve put both of these files in a folder called mysql in our tutorial directory.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/2a5b0999e7170b7fb5cd653168ecb69f.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Some Dockerfile Commands&lt;/h2&gt;
&lt;p&gt;I’ll go ahead and explain a few of the common Dockerfile commands.&lt;/p&gt;
&lt;p&gt;The FROM command tells Docker which image to extend. Here, we are building on top of the MySQL image with tag 8.0. If you&#39;re feeling adventurous, try changing the tag; the tutorial should still work.&lt;/p&gt;
&lt;p&gt;The ENV command sets—acts shocked—an environment variable. Environment variables, broadly speaking, are dynamically set values that affect the behavior of running processes. In this case, we are setting the password for the database. Thus, if you want to log in with an external tool like MySQL Workbench, use the password example and the default username of root. You won’t need any programs other than Docker to complete this tutorial, but database tooling should work with the containerized database.&lt;/p&gt;
&lt;p&gt;The COPY command moves files from your actual file system to the container’s virtual filesystem. Keep in mind, containers are immutable so we have to copy over files or mount volumes during the creation step. So, what are we copying over here?
It’s just a SQL file to populate a table. Obviously, out of the box, the database will be a blank slate. I went ahead and added some records as part of the database initialization process. This technique is probably not how you actually do this in a real environment, but it keeps the tutorial simple.&lt;/p&gt;
&lt;p&gt;Finally, the CMD command tells the container what to run once the container starts up. Here, I am overriding the mysql’s image default behavior because we need to add a flag to the command. The --init-file flag allows us to run a file containing SQL queries after the database initializes, which is exactly what we want.&lt;/p&gt;
&lt;p&gt;This file by itself does nothing. We&#39;ll have to build the Dockerfile into an image and run it—but that&#39;ll come later.&lt;/p&gt;
&lt;h2&gt;PHP Setup&lt;/h2&gt;
&lt;p&gt;Cool—we have a database Dockerfile. Let’s do something with it by creating a simple PHP page, which will involve spinning up a second container. This pattern will get familiar. You will spend some amount of time configuring Docker containers for all the components of your application.&lt;/p&gt;
&lt;p&gt;The PHP file itself creates an html table displaying the contents of the database table—pretty much in a one-to-one fashion. Most of this file is html. You don’t have to understand all the details of the PHP part, but it’s just querying our database.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/bf8ae58f819368b888091757cdc802ed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;An interesting thing to point out here is the database container&#39;s hostname. It&#39;s the same name as the container. Thus, you don&#39;t have to figure out what IP the container has been assigned. Some DNS magic is making our lives easier behind the scenes.&lt;/p&gt;
&lt;p&gt;Now, let&#39;s look at the Docker file. It&#39;s similar to the one from earlier—so I&#39;m not going to review the syntax again. &lt;a href=&quot;https://hub.docker.com/_/php&quot;&gt;We are going to build from the base image found at this link.&lt;/a&gt; One thing to note is that we have to install a PHP extension for PDO to establish a connection to our MySQL database. Luckily, the base PHP image provides some utility scripts to work with these extensions. It&#39;s an easy thing to implement but could be easily overlooked.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/da629c016cd8763d1610beb50bc07238.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;To note, I’ve placed both this Dockerfile as well as the PHP file in a folder called php. You&#39;ll need to be careful about the directory structure because it will matter for the next step. Things will crash if you screw up 🙃&lt;/p&gt;
&lt;h2&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;Phew—we&#39;re almost there. We have our images and could imperatively use the Docker CLI to run the containers and network them together. But that&#39;s no fun and is a pain to manage. &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Instead, I&#39;m going to scribble up a Docker Compose file.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker Compose is an abstraction on top of Docker to fire up a set of containers, volumes, networks, and other environment stuff. In other words, it is basically a declarative way of interfacing with Docker. We can create a single YAML file to spin an environment up and down.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/froggermtp/a73cb2e2a189a9b6c0ce574a37fffa63.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;Run the Containers&lt;/h2&gt;
&lt;p&gt;Awesome. We now have everything we need. Let&#39;s run this thing by telling Docker Compose to spin up our containers.&lt;/p&gt;
&lt;p&gt;docker-compose up -d&lt;/p&gt;
&lt;p&gt;You should then be able to navigate to localhost:8080 and see the page. It&#39;s not glorious, but there should be an html table with some rows populated.&lt;/p&gt;
&lt;p&gt;Of course, for more realistic scenarios, you aren&#39;t going to have a single PHP page that connects to a pre-populated database. Your app will likely be split into components running as their own microservices. Alternatively, you might be transitioning a monolithic application over to a container. These use cases are obviously more complicated than this silly example, but the point was to focus on Docker. Many of the concepts used here will be applicable to larger projects. Anyway, I hope you learned something.&lt;/p&gt;
</content>
  </entry>
</feed>